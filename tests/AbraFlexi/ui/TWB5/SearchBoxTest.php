<?php

namespace Test\AbraFlexi\ui\TWB5;

use AbraFlexi\ui\TWB5\SearchBox;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2025-06-26 at 09:26:11.
 */
class SearchBoxTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var SearchBox
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new SearchBox();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {
        
    }

    /**
     * @covers AbraFlexi\ui\TWB5\SearchBox::afterAdd
     * @todo   Implement testafterAdd().
     */
    public function testafterAdd() {
        $this->assertEquals('', $this->object->afterAdd());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\ui\TWB5\SearchBox::finalize
     * @todo   Implement testfinalize().
     */
    public function testfinalize() {
        $this->assertEquals('', $this->object->finalize());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    public function testAfterAddAddsDatalistAndJavascript()
    {
        $box = $this->getMockBuilder(SearchBox::class)
            ->onlyMethods(['parent', 'getTagID', 'addJavaScript'])
            ->getMock();
        $parent = $this->getMockBuilder(\Ease\Html\Tag::class)
            ->onlyMethods(['addItem'])
            ->getMock();
        $box->expects($this->once())->method('parent')->willReturn($parent);
        $box->expects($this->once())->method('getTagID')->willReturn('searchid');
        $parent->expects($this->once())->method('addItem')->with($this->isInstanceOf(\Ease\Html\DatalistTag::class));
        $box->expects($this->once())->method('addJavaScript')->with($this->stringContains('dataList = $(\'#datalist-searchid\')'));
        $box->afterAdd();
    }

    public function testFinalizeSetsListProperty()
    {
        $box = $this->getMockBuilder(SearchBox::class)
            ->onlyMethods(['getTagID'])
            ->getMock();
        $box->expects($this->once())->method('getTagID')->willReturn('searchid');
        $box->finalize();
        $reflection = new \ReflectionClass($box);
        $propsProperty = $reflection->getParentClass()->getProperty('properties');
        $propsProperty->setAccessible(true);
        $props = $propsProperty->getValue($box);
        $this->assertArrayHasKey('list', $props);
        $this->assertEquals('datalist-searchid', $props['list']);
    }
}
