<?php

namespace Test\AbraFlexi\ui\TWB5;

use AbraFlexi\ui\TWB5\AbraFlexiLogo;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2025-06-26 at 09:26:10.
 */
class AbraFlexiLogoTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var AbraFlexiLogo
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new AbraFlexiLogo();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {
        
    }

    public function testSvgIsStringAndContainsSvgTag()
    {
        $this->assertIsString(AbraFlexiLogo::$svg);
        $this->assertStringContainsString('<svg', AbraFlexiLogo::$svg);
        $this->assertStringContainsString('</svg>', AbraFlexiLogo::$svg);
    }

    public function testConstructorSetsBase64SrcAndAlt()
    {
        $logo = new AbraFlexiLogo();
        $reflection = new \ReflectionClass($logo);
        $srcProperty = $reflection->getParentClass()->getProperty('src');
        $srcProperty->setAccessible(true);
        $src = $srcProperty->getValue($logo);
        $this->assertStringStartsWith('data:image/svg+xml;base64,', $src);
        $this->assertStringContainsString(base64_encode(AbraFlexiLogo::$svg), $src);

        $altProperty = $reflection->getParentClass()->getProperty('alt');
        $altProperty->setAccessible(true);
        $alt = $altProperty->getValue($logo);
        $this->assertEquals('AbraFlexi', $alt);
    }

    public function testConstructorAcceptsTagProperties()
    {
        $props = ['class' => 'logo', 'id' => 'aflogo'];
        $logo = new AbraFlexiLogo('default', $props);
        $reflection = new \ReflectionClass($logo);
        $propsProperty = $reflection->getParentClass()->getProperty('properties');
        $propsProperty->setAccessible(true);
        $actualProps = $propsProperty->getValue($logo);
        $this->assertArrayHasKey('class', $actualProps);
        $this->assertEquals('logo', $actualProps['class']);
        $this->assertArrayHasKey('id', $actualProps);
        $this->assertEquals('aflogo', $actualProps['id']);
    }
}
