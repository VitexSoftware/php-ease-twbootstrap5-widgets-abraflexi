<?php

namespace Test\AbraFlexi\ui\TWB5;

use AbraFlexi\ui\TWB5\RecordChooser;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2025-06-26 at 09:26:11.
 */
class RecordChooserTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var RecordChooser
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new RecordChooser();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {
        
    }

    /**
     * @covers AbraFlexi\ui\TWB5\RecordChooser::selectize
     * @todo   Implement testselectize().
     */
    public function testselectize() {
        $this->assertEquals('', $this->object->selectize());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    public function testSelectizeCalledWithExpectedArguments()
    {
        $mockOptionsEngine = $this->createMock(\AbraFlexi\RO::class);
        $mockOptionsEngine->expects($this->any())
            ->method('getColumnInfo')
            ->willReturnMap([
                ['nazev', ['nazev' => 'Název']],
                ['kod', ['kod' => 'Kód']],
            ]);
        $mockOptionsEngine->expects($this->once())
            ->method('getColumnsFromAbraFlexi')
            ->with($this->equalTo(['kod', 'nazev']))
            ->willReturn([
                ['kod' => 'A1', 'nazev' => 'Alpha'],
                ['kod' => 'B2', 'nazev' => 'Beta'],
            ]);

        $chooser = $this->getMockBuilder(RecordChooser::class)
            ->setConstructorArgs(['test', [], $mockOptionsEngine])
            ->onlyMethods(['selectize'])
            ->getMock();
        $chooser->expects($this->once())
            ->method('selectize')
            ->with(
                $this->arrayHasKey('plugins'),
                $this->isType('array')
            );
        $chooser->__construct('test', [], $mockOptionsEngine);
    }
}
