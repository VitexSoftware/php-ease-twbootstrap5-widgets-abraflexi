<?php

namespace Test\AbraFlexi\ui\TWB5;

use AbraFlexi\ui\TWB5\StatusInfoBox;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2025-06-26 at 09:26:12.
 */
class StatusInfoBoxTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var StatusInfoBox
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new StatusInfoBox();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {
        
    }

    /**
     * @covers AbraFlexi\ui\TWB5\StatusInfoBox::connected
     * @todo   Implement testconnected().
     */
    public function testconnected() {
        $this->assertEquals('', $this->object->connected());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\ui\TWB5\StatusInfoBox::draw
     * @todo   Implement testdraw().
     */
    public function testdraw() {
        $this->assertEquals('', $this->object->draw());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\ui\TWB5\StatusInfoBox::addItemCustom
     * @todo   Implement testaddItemCustom().
     */
    public function testaddItemCustom() {
        $this->assertEquals('', $this->object->addItemCustom());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\ui\TWB5\StatusInfoBox::addItem
     * @todo   Implement testaddItem().
     */
    public function testaddItem() {
        $this->assertEquals('', $this->object->addItem());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\ui\TWB5\StatusInfoBox::setEmbedName
     * @todo   Implement testsetEmbedName().
     */
    public function testsetEmbedName() {
        $this->assertEquals('', $this->object->setEmbedName());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\ui\TWB5\StatusInfoBox::afterAdd
     * @todo   Implement testafterAdd().
     */
    public function testafterAdd() {
        $this->assertEquals('', $this->object->afterAdd());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers AbraFlexi\ui\TWB5\StatusInfoBox::finalize
     * @todo   Implement testfinalize().
     */
    public function testfinalize() {
        $this->assertEquals('', $this->object->finalize());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    public function testConnectedReturnsTrueIfCompanyInInfo()
    {
        $box = $this->getMockBuilder(StatusInfoBox::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['getCompany'])
            ->getMock();
        $box->info = ['testcompany' => ['nazev' => 'Test Company']];
        $box->method('getCompany')->willReturn('testcompany');
        $this->assertTrue($box->connected());
    }

    public function testConnectedReturnsFalseIfCompanyNotInInfo()
    {
        $box = $this->getMockBuilder(StatusInfoBox::class)
            ->disableOriginalConstructor()
            ->onlyMethods(['getCompany'])
            ->getMock();
        $box->info = ['othercompany' => ['nazev' => 'Other Company']];
        $box->method('getCompany')->willReturn('testcompany');
        $this->assertFalse($box->connected());
    }
}
